// automatically generated by the FlatBuffers compiler, do not modify

// @generated

extern crate flatbuffers;

#[allow(unused_imports, dead_code)]
pub mod common {

    use core::cmp::Ordering;
    use core::mem;

    extern crate flatbuffers;
    use self::flatbuffers::{EndianScalar, Follow};

    #[deprecated(
        since = "2.0.0",
        note = "Use associated constants instead. This will no longer be generated in 2021."
    )]
    pub const ENUM_MIN_REWARD_TYPE: u8 = 0;
    #[deprecated(
        since = "2.0.0",
        note = "Use associated constants instead. This will no longer be generated in 2021."
    )]
    pub const ENUM_MAX_REWARD_TYPE: u8 = 4;
    #[deprecated(
        since = "2.0.0",
        note = "Use associated constants instead. This will no longer be generated in 2021."
    )]
    #[allow(non_camel_case_types)]
    pub const ENUM_VALUES_REWARD_TYPE: [RewardType; 5] = [
        RewardType::None,
        RewardType::Fee,
        RewardType::Rent,
        RewardType::Staking,
        RewardType::Voting,
    ];

    #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Default)]
    #[repr(transparent)]
    pub struct RewardType(pub u8);
    #[allow(non_upper_case_globals)]
    impl RewardType {
        pub const None: Self = Self(0);
        pub const Fee: Self = Self(1);
        pub const Rent: Self = Self(2);
        pub const Staking: Self = Self(3);
        pub const Voting: Self = Self(4);

        pub const ENUM_MIN: u8 = 0;
        pub const ENUM_MAX: u8 = 4;
        pub const ENUM_VALUES: &'static [Self] = &[
            Self::None,
            Self::Fee,
            Self::Rent,
            Self::Staking,
            Self::Voting,
        ];
        /// Returns the variant's name or "" if unknown.
        pub fn variant_name(self) -> Option<&'static str> {
            match self {
                Self::None => Some("None"),
                Self::Fee => Some("Fee"),
                Self::Rent => Some("Rent"),
                Self::Staking => Some("Staking"),
                Self::Voting => Some("Voting"),
                _ => None,
            }
        }
    }
    impl core::fmt::Debug for RewardType {
        fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
            if let Some(name) = self.variant_name() {
                f.write_str(name)
            } else {
                f.write_fmt(format_args!("<UNKNOWN {:?}>", self.0))
            }
        }
    }
    impl<'a> flatbuffers::Follow<'a> for RewardType {
        type Inner = Self;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            let b = flatbuffers::read_scalar_at::<u8>(buf, loc);
            Self(b)
        }
    }

    impl flatbuffers::Push for RewardType {
        type Output = RewardType;
        #[inline]
        unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
            flatbuffers::emplace_scalar::<u8>(dst, self.0);
        }
    }

    impl flatbuffers::EndianScalar for RewardType {
        type Scalar = u8;
        #[inline]
        fn to_little_endian(self) -> u8 {
            self.0.to_le()
        }
        #[inline]
        #[allow(clippy::wrong_self_convention)]
        fn from_little_endian(v: u8) -> Self {
            let b = u8::from_le(v);
            Self(b)
        }
    }

    impl<'a> flatbuffers::Verifiable for RewardType {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            u8::run_verifier(v, pos)
        }
    }

    impl flatbuffers::SimpleToVerifyInSlice for RewardType {}
    pub enum PubkeyOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct Pubkey<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for Pubkey<'a> {
        type Inner = Pubkey<'a>;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table::new(buf, loc),
            }
        }
    }

    impl<'a> Pubkey<'a> {
        pub const VT_KEY: flatbuffers::VOffsetT = 4;

        #[inline]
        pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            Pubkey { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
            args: &'args PubkeyArgs<'args>,
        ) -> flatbuffers::WIPOffset<Pubkey<'bldr>> {
            let mut builder = PubkeyBuilder::new(_fbb);
            if let Some(x) = args.key {
                builder.add_key(x);
            }
            builder.finish()
        }

        #[inline]
        pub fn key(&self) -> Option<flatbuffers::Vector<'a, u8>> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(
                        Pubkey::VT_KEY,
                        None,
                    )
            }
        }
    }

    impl flatbuffers::Verifiable for Pubkey<'_> {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>(
                    "key",
                    Self::VT_KEY,
                    false,
                )?
                .finish();
            Ok(())
        }
    }
    pub struct PubkeyArgs<'a> {
        pub key: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    }
    impl<'a> Default for PubkeyArgs<'a> {
        #[inline]
        fn default() -> Self {
            PubkeyArgs { key: None }
        }
    }

    pub struct PubkeyBuilder<'a: 'b, 'b> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b> PubkeyBuilder<'a, 'b> {
        #[inline]
        pub fn add_key(&mut self, key: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u8>>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(Pubkey::VT_KEY, key);
        }
        #[inline]
        pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> PubkeyBuilder<'a, 'b> {
            let start = _fbb.start_table();
            PubkeyBuilder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<Pubkey<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl core::fmt::Debug for Pubkey<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            let mut ds = f.debug_struct("Pubkey");
            ds.field("key", &self.key());
            ds.finish()
        }
    }
    pub enum SignatureOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct Signature<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for Signature<'a> {
        type Inner = Signature<'a>;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table::new(buf, loc),
            }
        }
    }

    impl<'a> Signature<'a> {
        pub const VT_KEY: flatbuffers::VOffsetT = 4;

        #[inline]
        pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            Signature { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
            args: &'args SignatureArgs<'args>,
        ) -> flatbuffers::WIPOffset<Signature<'bldr>> {
            let mut builder = SignatureBuilder::new(_fbb);
            if let Some(x) = args.key {
                builder.add_key(x);
            }
            builder.finish()
        }

        #[inline]
        pub fn key(&self) -> Option<flatbuffers::Vector<'a, u8>> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(
                        Signature::VT_KEY,
                        None,
                    )
            }
        }
    }

    impl flatbuffers::Verifiable for Signature<'_> {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>(
                    "key",
                    Self::VT_KEY,
                    false,
                )?
                .finish();
            Ok(())
        }
    }
    pub struct SignatureArgs<'a> {
        pub key: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    }
    impl<'a> Default for SignatureArgs<'a> {
        #[inline]
        fn default() -> Self {
            SignatureArgs { key: None }
        }
    }

    pub struct SignatureBuilder<'a: 'b, 'b> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b> SignatureBuilder<'a, 'b> {
        #[inline]
        pub fn add_key(&mut self, key: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u8>>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(Signature::VT_KEY, key);
        }
        #[inline]
        pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> SignatureBuilder<'a, 'b> {
            let start = _fbb.start_table();
            SignatureBuilder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<Signature<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl core::fmt::Debug for Signature<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            let mut ds = f.debug_struct("Signature");
            ds.field("key", &self.key());
            ds.finish()
        }
    }
    pub enum RewardOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct Reward<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for Reward<'a> {
        type Inner = Reward<'a>;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table::new(buf, loc),
            }
        }
    }

    impl<'a> Reward<'a> {
        pub const VT_PUBKEY: flatbuffers::VOffsetT = 4;
        pub const VT_LAMPORTS: flatbuffers::VOffsetT = 6;
        pub const VT_POST_BALANCE: flatbuffers::VOffsetT = 8;
        pub const VT_REWARD_TYPE: flatbuffers::VOffsetT = 10;
        pub const VT_COMMISSION: flatbuffers::VOffsetT = 12;

        #[inline]
        pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            Reward { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
            args: &'args RewardArgs<'args>,
        ) -> flatbuffers::WIPOffset<Reward<'bldr>> {
            let mut builder = RewardBuilder::new(_fbb);
            builder.add_post_balance(args.post_balance);
            builder.add_lamports(args.lamports);
            if let Some(x) = args.pubkey {
                builder.add_pubkey(x);
            }
            if let Some(x) = args.commission {
                builder.add_commission(x);
            }
            builder.add_reward_type(args.reward_type);
            builder.finish()
        }

        #[inline]
        pub fn pubkey(&self) -> Option<&'a str> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<&str>>(Reward::VT_PUBKEY, None)
            }
        }
        #[inline]
        pub fn lamports(&self) -> i64 {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe { self._tab.get::<i64>(Reward::VT_LAMPORTS, Some(0)).unwrap() }
        }
        #[inline]
        pub fn post_balance(&self) -> u64 {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<u64>(Reward::VT_POST_BALANCE, Some(0))
                    .unwrap()
            }
        }
        #[inline]
        pub fn reward_type(&self) -> RewardType {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<RewardType>(Reward::VT_REWARD_TYPE, Some(RewardType::None))
                    .unwrap()
            }
        }
        #[inline]
        pub fn commission(&self) -> Option<u8> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe { self._tab.get::<u8>(Reward::VT_COMMISSION, None) }
        }
    }

    impl flatbuffers::Verifiable for Reward<'_> {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_field::<flatbuffers::ForwardsUOffset<&str>>(
                    "pubkey",
                    Self::VT_PUBKEY,
                    false,
                )?
                .visit_field::<i64>("lamports", Self::VT_LAMPORTS, false)?
                .visit_field::<u64>("post_balance", Self::VT_POST_BALANCE, false)?
                .visit_field::<RewardType>("reward_type", Self::VT_REWARD_TYPE, false)?
                .visit_field::<u8>("commission", Self::VT_COMMISSION, false)?
                .finish();
            Ok(())
        }
    }
    pub struct RewardArgs<'a> {
        pub pubkey: Option<flatbuffers::WIPOffset<&'a str>>,
        pub lamports: i64,
        pub post_balance: u64,
        pub reward_type: RewardType,
        pub commission: Option<u8>,
    }
    impl<'a> Default for RewardArgs<'a> {
        #[inline]
        fn default() -> Self {
            RewardArgs {
                pubkey: None,
                lamports: 0,
                post_balance: 0,
                reward_type: RewardType::None,
                commission: None,
            }
        }
    }

    pub struct RewardBuilder<'a: 'b, 'b> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b> RewardBuilder<'a, 'b> {
        #[inline]
        pub fn add_pubkey(&mut self, pubkey: flatbuffers::WIPOffset<&'b str>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(Reward::VT_PUBKEY, pubkey);
        }
        #[inline]
        pub fn add_lamports(&mut self, lamports: i64) {
            self.fbb_.push_slot::<i64>(Reward::VT_LAMPORTS, lamports, 0);
        }
        #[inline]
        pub fn add_post_balance(&mut self, post_balance: u64) {
            self.fbb_
                .push_slot::<u64>(Reward::VT_POST_BALANCE, post_balance, 0);
        }
        #[inline]
        pub fn add_reward_type(&mut self, reward_type: RewardType) {
            self.fbb_.push_slot::<RewardType>(
                Reward::VT_REWARD_TYPE,
                reward_type,
                RewardType::None,
            );
        }
        #[inline]
        pub fn add_commission(&mut self, commission: u8) {
            self.fbb_
                .push_slot_always::<u8>(Reward::VT_COMMISSION, commission);
        }
        #[inline]
        pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> RewardBuilder<'a, 'b> {
            let start = _fbb.start_table();
            RewardBuilder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<Reward<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl core::fmt::Debug for Reward<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            let mut ds = f.debug_struct("Reward");
            ds.field("pubkey", &self.pubkey());
            ds.field("lamports", &self.lamports());
            ds.field("post_balance", &self.post_balance());
            ds.field("reward_type", &self.reward_type());
            ds.field("commission", &self.commission());
            ds.finish()
        }
    }
} // pub mod Common
