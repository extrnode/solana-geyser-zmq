// automatically generated by the FlatBuffers compiler, do not modify

// @generated

extern crate flatbuffers;

#[allow(unused_imports, dead_code)]
pub mod account_info_v2 {

    use core::cmp::Ordering;
    use core::mem;

    extern crate flatbuffers;
    use self::flatbuffers::{EndianScalar, Follow};

    pub enum AccountInfoV2Offset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct AccountInfoV2<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for AccountInfoV2<'a> {
        type Inner = AccountInfoV2<'a>;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table::new(buf, loc),
            }
        }
    }

    impl<'a> AccountInfoV2<'a> {
        pub const VT_PUBKEY: flatbuffers::VOffsetT = 4;
        pub const VT_OWNER: flatbuffers::VOffsetT = 6;
        pub const VT_SLOT: flatbuffers::VOffsetT = 8;
        pub const VT_ACCOUNT_DATA: flatbuffers::VOffsetT = 10;

        #[inline]
        pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            AccountInfoV2 { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
            args: &'args AccountInfoV2Args<'args>,
        ) -> flatbuffers::WIPOffset<AccountInfoV2<'bldr>> {
            let mut builder = AccountInfoV2Builder::new(_fbb);
            builder.add_slot(args.slot);
            if let Some(x) = args.account_data {
                builder.add_account_data(x);
            }
            if let Some(x) = args.owner {
                builder.add_owner(x);
            }
            if let Some(x) = args.pubkey {
                builder.add_pubkey(x);
            }
            builder.finish()
        }

        #[inline]
        pub fn pubkey(&self) -> Option<&'a str> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<&str>>(AccountInfoV2::VT_PUBKEY, None)
            }
        }
        #[inline]
        pub fn owner(&self) -> Option<&'a str> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<&str>>(AccountInfoV2::VT_OWNER, None)
            }
        }
        #[inline]
        pub fn slot(&self) -> u64 {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<u64>(AccountInfoV2::VT_SLOT, Some(0))
                    .unwrap()
            }
        }
        #[inline]
        pub fn account_data(&self) -> Option<AccountData<'a>> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab.get::<flatbuffers::ForwardsUOffset<AccountData>>(
                    AccountInfoV2::VT_ACCOUNT_DATA,
                    None,
                )
            }
        }
    }

    impl flatbuffers::Verifiable for AccountInfoV2<'_> {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_field::<flatbuffers::ForwardsUOffset<&str>>(
                    "pubkey",
                    Self::VT_PUBKEY,
                    false,
                )?
                .visit_field::<flatbuffers::ForwardsUOffset<&str>>("owner", Self::VT_OWNER, false)?
                .visit_field::<u64>("slot", Self::VT_SLOT, false)?
                .visit_field::<flatbuffers::ForwardsUOffset<AccountData>>(
                    "account_data",
                    Self::VT_ACCOUNT_DATA,
                    false,
                )?
                .finish();
            Ok(())
        }
    }
    pub struct AccountInfoV2Args<'a> {
        pub pubkey: Option<flatbuffers::WIPOffset<&'a str>>,
        pub owner: Option<flatbuffers::WIPOffset<&'a str>>,
        pub slot: u64,
        pub account_data: Option<flatbuffers::WIPOffset<AccountData<'a>>>,
    }
    impl<'a> Default for AccountInfoV2Args<'a> {
        #[inline]
        fn default() -> Self {
            AccountInfoV2Args {
                pubkey: None,
                owner: None,
                slot: 0,
                account_data: None,
            }
        }
    }

    pub struct AccountInfoV2Builder<'a: 'b, 'b> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b> AccountInfoV2Builder<'a, 'b> {
        #[inline]
        pub fn add_pubkey(&mut self, pubkey: flatbuffers::WIPOffset<&'b str>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(AccountInfoV2::VT_PUBKEY, pubkey);
        }
        #[inline]
        pub fn add_owner(&mut self, owner: flatbuffers::WIPOffset<&'b str>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(AccountInfoV2::VT_OWNER, owner);
        }
        #[inline]
        pub fn add_slot(&mut self, slot: u64) {
            self.fbb_.push_slot::<u64>(AccountInfoV2::VT_SLOT, slot, 0);
        }
        #[inline]
        pub fn add_account_data(&mut self, account_data: flatbuffers::WIPOffset<AccountData<'b>>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<AccountData>>(
                    AccountInfoV2::VT_ACCOUNT_DATA,
                    account_data,
                );
        }
        #[inline]
        pub fn new(
            _fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        ) -> AccountInfoV2Builder<'a, 'b> {
            let start = _fbb.start_table();
            AccountInfoV2Builder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<AccountInfoV2<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl core::fmt::Debug for AccountInfoV2<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            let mut ds = f.debug_struct("AccountInfoV2");
            ds.field("pubkey", &self.pubkey());
            ds.field("owner", &self.owner());
            ds.field("slot", &self.slot());
            ds.field("account_data", &self.account_data());
            ds.finish()
        }
    }
    pub enum AccountDataOffset {}
    #[derive(Copy, Clone, PartialEq)]

    pub struct AccountData<'a> {
        pub _tab: flatbuffers::Table<'a>,
    }

    impl<'a> flatbuffers::Follow<'a> for AccountData<'a> {
        type Inner = AccountData<'a>;
        #[inline]
        unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
            Self {
                _tab: flatbuffers::Table::new(buf, loc),
            }
        }
    }

    impl<'a> AccountData<'a> {
        pub const VT_LAMPORTS: flatbuffers::VOffsetT = 4;
        pub const VT_RENT_EPOCH: flatbuffers::VOffsetT = 6;
        pub const VT_EXECUTABLE: flatbuffers::VOffsetT = 8;
        pub const VT_VERSION: flatbuffers::VOffsetT = 10;
        pub const VT_DATA: flatbuffers::VOffsetT = 12;

        #[inline]
        pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
            AccountData { _tab: table }
        }
        #[allow(unused_mut)]
        pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
            _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
            args: &'args AccountDataArgs<'args>,
        ) -> flatbuffers::WIPOffset<AccountData<'bldr>> {
            let mut builder = AccountDataBuilder::new(_fbb);
            builder.add_version(args.version);
            builder.add_rent_epoch(args.rent_epoch);
            builder.add_lamports(args.lamports);
            if let Some(x) = args.data {
                builder.add_data(x);
            }
            builder.add_executable(args.executable);
            builder.finish()
        }

        #[inline]
        pub fn lamports(&self) -> u64 {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<u64>(AccountData::VT_LAMPORTS, Some(0))
                    .unwrap()
            }
        }
        #[inline]
        pub fn rent_epoch(&self) -> u64 {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<u64>(AccountData::VT_RENT_EPOCH, Some(0))
                    .unwrap()
            }
        }
        #[inline]
        pub fn executable(&self) -> bool {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<bool>(AccountData::VT_EXECUTABLE, Some(false))
                    .unwrap()
            }
        }
        #[inline]
        pub fn version(&self) -> u64 {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<u64>(AccountData::VT_VERSION, Some(0))
                    .unwrap()
            }
        }
        #[inline]
        pub fn data(&self) -> Option<flatbuffers::Vector<'a, u8>> {
            // Safety:
            // Created from valid Table for this object
            // which contains a valid value in this slot
            unsafe {
                self._tab
                    .get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(
                        AccountData::VT_DATA,
                        None,
                    )
            }
        }
    }

    impl flatbuffers::Verifiable for AccountData<'_> {
        #[inline]
        fn run_verifier(
            v: &mut flatbuffers::Verifier,
            pos: usize,
        ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
            use self::flatbuffers::Verifiable;
            v.visit_table(pos)?
                .visit_field::<u64>("lamports", Self::VT_LAMPORTS, false)?
                .visit_field::<u64>("rent_epoch", Self::VT_RENT_EPOCH, false)?
                .visit_field::<bool>("executable", Self::VT_EXECUTABLE, false)?
                .visit_field::<u64>("version", Self::VT_VERSION, false)?
                .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>(
                    "data",
                    Self::VT_DATA,
                    false,
                )?
                .finish();
            Ok(())
        }
    }
    pub struct AccountDataArgs<'a> {
        pub lamports: u64,
        pub rent_epoch: u64,
        pub executable: bool,
        pub version: u64,
        pub data: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    }
    impl<'a> Default for AccountDataArgs<'a> {
        #[inline]
        fn default() -> Self {
            AccountDataArgs {
                lamports: 0,
                rent_epoch: 0,
                executable: false,
                version: 0,
                data: None,
            }
        }
    }

    pub struct AccountDataBuilder<'a: 'b, 'b> {
        fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
    }
    impl<'a: 'b, 'b> AccountDataBuilder<'a, 'b> {
        #[inline]
        pub fn add_lamports(&mut self, lamports: u64) {
            self.fbb_
                .push_slot::<u64>(AccountData::VT_LAMPORTS, lamports, 0);
        }
        #[inline]
        pub fn add_rent_epoch(&mut self, rent_epoch: u64) {
            self.fbb_
                .push_slot::<u64>(AccountData::VT_RENT_EPOCH, rent_epoch, 0);
        }
        #[inline]
        pub fn add_executable(&mut self, executable: bool) {
            self.fbb_
                .push_slot::<bool>(AccountData::VT_EXECUTABLE, executable, false);
        }
        #[inline]
        pub fn add_version(&mut self, version: u64) {
            self.fbb_
                .push_slot::<u64>(AccountData::VT_VERSION, version, 0);
        }
        #[inline]
        pub fn add_data(&mut self, data: flatbuffers::WIPOffset<flatbuffers::Vector<'b, u8>>) {
            self.fbb_
                .push_slot_always::<flatbuffers::WIPOffset<_>>(AccountData::VT_DATA, data);
        }
        #[inline]
        pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> AccountDataBuilder<'a, 'b> {
            let start = _fbb.start_table();
            AccountDataBuilder {
                fbb_: _fbb,
                start_: start,
            }
        }
        #[inline]
        pub fn finish(self) -> flatbuffers::WIPOffset<AccountData<'a>> {
            let o = self.fbb_.end_table(self.start_);
            flatbuffers::WIPOffset::new(o.value())
        }
    }

    impl core::fmt::Debug for AccountData<'_> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            let mut ds = f.debug_struct("AccountData");
            ds.field("lamports", &self.lamports());
            ds.field("rent_epoch", &self.rent_epoch());
            ds.field("executable", &self.executable());
            ds.field("version", &self.version());
            ds.field("data", &self.data());
            ds.finish()
        }
    }
    #[inline]
    /// Verifies that a buffer of bytes contains a `AccountInfoV2`
    /// and returns it.
    /// Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `root_as_account_info_v2_unchecked`.
    pub fn root_as_account_info_v2(
        buf: &[u8],
    ) -> Result<AccountInfoV2, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::root::<AccountInfoV2>(buf)
    }
    #[inline]
    /// Verifies that a buffer of bytes contains a size prefixed
    /// `AccountInfoV2` and returns it.
    /// Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `size_prefixed_root_as_account_info_v2_unchecked`.
    pub fn size_prefixed_root_as_account_info_v2(
        buf: &[u8],
    ) -> Result<AccountInfoV2, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::size_prefixed_root::<AccountInfoV2>(buf)
    }
    #[inline]
    /// Verifies, with the given options, that a buffer of bytes
    /// contains a `AccountInfoV2` and returns it.
    /// Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `root_as_account_info_v2_unchecked`.
    pub fn root_as_account_info_v2_with_opts<'b, 'o>(
        opts: &'o flatbuffers::VerifierOptions,
        buf: &'b [u8],
    ) -> Result<AccountInfoV2<'b>, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::root_with_opts::<AccountInfoV2<'b>>(opts, buf)
    }
    #[inline]
    /// Verifies, with the given verifier options, that a buffer of
    /// bytes contains a size prefixed `AccountInfoV2` and returns
    /// it. Note that verification is still experimental and may not
    /// catch every error, or be maximally performant. For the
    /// previous, unchecked, behavior use
    /// `root_as_account_info_v2_unchecked`.
    pub fn size_prefixed_root_as_account_info_v2_with_opts<'b, 'o>(
        opts: &'o flatbuffers::VerifierOptions,
        buf: &'b [u8],
    ) -> Result<AccountInfoV2<'b>, flatbuffers::InvalidFlatbuffer> {
        flatbuffers::size_prefixed_root_with_opts::<AccountInfoV2<'b>>(opts, buf)
    }
    #[inline]
    /// Assumes, without verification, that a buffer of bytes contains a AccountInfoV2 and returns it.
    /// # Safety
    /// Callers must trust the given bytes do indeed contain a valid `AccountInfoV2`.
    pub unsafe fn root_as_account_info_v2_unchecked(buf: &[u8]) -> AccountInfoV2 {
        flatbuffers::root_unchecked::<AccountInfoV2>(buf)
    }
    #[inline]
    /// Assumes, without verification, that a buffer of bytes contains a size prefixed AccountInfoV2 and returns it.
    /// # Safety
    /// Callers must trust the given bytes do indeed contain a valid size prefixed `AccountInfoV2`.
    pub unsafe fn size_prefixed_root_as_account_info_v2_unchecked(buf: &[u8]) -> AccountInfoV2 {
        flatbuffers::size_prefixed_root_unchecked::<AccountInfoV2>(buf)
    }
    #[inline]
    pub fn finish_account_info_v2_buffer<'a, 'b>(
        fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        root: flatbuffers::WIPOffset<AccountInfoV2<'a>>,
    ) {
        fbb.finish(root, None);
    }

    #[inline]
    pub fn finish_size_prefixed_account_info_v2_buffer<'a, 'b>(
        fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
        root: flatbuffers::WIPOffset<AccountInfoV2<'a>>,
    ) {
        fbb.finish_size_prefixed(root, None);
    }
} // pub mod AccountInfoV2
