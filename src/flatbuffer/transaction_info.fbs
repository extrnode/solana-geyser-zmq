include "common.fbs";

namespace TransactionInfo;

table TransactionInfo {
  signature: Common.Signature;
  is_vote: bool;
  slot: uint64;
  transaction: [uint8];
  transaction_meta: TransactionStatusMeta;
  loaded_addresses: LoadedAddresses;
  account_keys: [Common.Pubkey];
  memo: string;
}

table LoadedAddresses {
  writable: [Common.Pubkey];
  readonly: [Common.Pubkey];
}

table CompiledInstruction {
  program_id_index: uint8;
  accounts: [uint8];
  data: [uint8];
}

enum TransactionErrorType: uint8 {
    AccountInUse,
    AccountLoadedTwice,
    AccountNotFound,
    ProgramAccountNotFound,
    InsufficientFundsForFee,
    InvalidAccountForFee,
    AlreadyProcessed,
    BlockhashNotFound,
    InstructionError,
    CallChainTooDeep,
    MissingSignatureForFee,
    InvalidAccountIndex,
    SignatureFailure,
    InvalidProgramForExecution,
    SanitizeFailure,
    ClusterMaintenance,
    AccountBorrowOutstanding,
    WouldExceedMaxBlockCostLimit,
    UnsupportedVersion,
    InvalidWritableAccount,
    WouldExceedMaxAccountCostLimit,
    WouldExceedAccountDataBlockLimit,
    TooManyAccountLocks,
    AddressLookupTableNotFound,
    InvalidAddressLookupTableOwner,
    InvalidAddressLookupTableData,
    InvalidAddressLookupTableIndex,
    InvalidRentPayingAccount,
    WouldExceedMaxVoteCostLimit,
    WouldExceedAccountDataTotalLimit,
    DuplicateInstruction,
    InsufficientFundsForRent,
}

enum InstructionErrorType: uint8 {
    GenericError,
    InvalidArgument,
    InvalidInstructionData,
    InvalidAccountData,
    AccountDataTooSmall,
    InsufficientFunds,
    IncorrectProgramId,
    MissingRequiredSignature,
    AccountAlreadyInitialized,
    UninitializedAccount,
    UnbalancedInstruction,
    ModifiedProgramId,
    ExternalAccountLamportSpend,
    ExternalAccountDataModified,
    ReadonlyLamportChange,
    ReadonlyDataModified,
    DuplicateAccountIndex,
    ExecutableModified,
    RentEpochModified,
    NotEnoughAccountKeys,
    AccountDataSizeChanged,
    AccountNotExecutable,
    AccountBorrowFailed,
    AccountBorrowOutstanding,
    DuplicateAccountOutOfSync,
    Custom,
    InvalidError,
    ExecutableDataModified,
    ExecutableLamportChange,
    ExecutableAccountNotRentExempt,
    UnsupportedProgramId,
    CallDepth,
    MissingAccount,
    ReentrancyNotAllowed,
    MaxSeedLengthExceeded,
    InvalidSeeds,
    InvalidRealloc,
    ComputationalBudgetExceeded,
    PrivilegeEscalation,
    ProgramEnvironmentSetupFailure,
    ProgramFailedToComplete,
    ProgramFailedToCompile,
    Immutable,
    IncorrectAuthority,
    BorshIoError,
    AccountNotRentExempt,
    InvalidAccountOwner,
    ArithmeticOverflow,
    UnsupportedSysvar,
    IllegalOwner,
    MaxAccountsDataSizeExceeded,
    ActiveVoteAccountClose,
}

union TransactionErrorData {
    InstructionError: InstructionErrorData,
    InnerByte: InnerByte,
}

table InstructionErrorData {
    instruction_number: uint8;
    err: InstructionError;
}

table InnerByte {
    inner_byte: uint8;
}

union InstructionErrorInnerData {
    BorshIoError: StringValue,
    Custom: Uint32Value,
}

table StringValue {
  value: string;
}

table Uint32Value {
  value: uint32;
}

table InstructionError {
    err_type: InstructionErrorType;
    err_data: InstructionErrorInnerData;
}

table TransactionError {
    err_type: TransactionErrorType;
    err_data: TransactionErrorData;
}

table TransactionStatusMeta {
    status: TransactionError;
    fee: uint64;
    pre_balances: [uint64];
    post_balances: [uint64];
    inner_instructions: [InnerInstructions];
    log_messages: [string];
    pre_token_balances: [TransactionTokenBalance];
    post_token_balances: [TransactionTokenBalance];
    rewards: [Common.Reward];
}

table InnerInstructions {
    index: uint8;
    instructions: [CompiledInstruction];
}

table TransactionTokenBalance {
    account_index: uint8;
    mint: string;
    ui_token_amount: UiTokenAmount;
    owner: string;
    program_id: string;
}

table UiTokenAmount {
    ui_amount: float64;
    decimals: uint8;
    amount: string;
    ui_amount_string: string;
}



root_type TransactionInfo;